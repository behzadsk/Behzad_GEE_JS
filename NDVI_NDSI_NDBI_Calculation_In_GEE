

// Define a date range
var startDate = '2001-11-01';
var endDate = '2002-03-15';

// Load Landsat 8 imagery
var landsat = ee.ImageCollection(LC5)
  .filterBounds(roi)
  .filterDate(startDate, endDate);

// Function to calculate NDSI
var calculateNDSI = function(image) {                   // NDSI = (Green - SWIR1) / (Green + SWIR1)
  var ndsi = image.normalizedDifference(['B3', 'B6']); // Landsat 4-7 (B2, B5), Landsat 8,9 (B3, B6), sen2 (B3,B11)
  return ndsi.rename('NDSI').copyProperties(image, ['system:time_start']);
};

// Apply the function to the Landsat collection
var ndsiCollection = landsat.map(calculateNDSI);

// Visualization parameters
var ndsiVis = {
  min: -1,
  max: 1,
  palette: ['blue', 'white', 'green']
};

var studyAreaNDSI = ndsiCollection.mean().clip(roi)

// Display the NDSI
Map.addLayer(studyAreaNDSI, ndsiVis, 'NDSI');

// Define a threshold for snow detection
var snowThreshold = 0.47; // You can adjust this threshold as needed

// Mask out non-snow pixels
var snowPixels = ndsiCollection.map(function(image) {
  var snowMask = image.select('NDSI').gt(snowThreshold);
  return image.updateMask(snowMask);
});

// Visualization parameters for snow pixels
var snowVis = {
  palette: ['Green']
};

// Display the snow pixels
//Map.addLayer(snowPixels, snowVis, 'Snow Pixels');
var  roiSnowPixels = snowPixels.mean().clip(roi)
// Export NDSI and snow pixels to Google Drive
Export.image.toDrive({
  image: studyAreaNDSI,
  description: 'NDSI_Image',
  folder:'RHB Temporal NDSI',
  scale: 30,
  region: roi,
  maxPixels:(1e13)
});

Export.image.toDrive({
  image: snowPixels,
  description: 'Snow_Pixels_Image',
  folder:'Temporal NDSI',
  scale: 30,
  region: roi,
  maxPixels:(1e13)
});
