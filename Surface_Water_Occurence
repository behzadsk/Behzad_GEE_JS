//creating area of interest 
Map.addLayer(AOI);
Map.centerObject(AOI , 8);

//Load Global surface water
//1984-2020

var gsw = ee.Image('JRC/GSW1_0/GlobalSurfaceWater');
var occurrence = gsw.select('occurrence');
Map.addLayer(occurrence, {palette:['blue'], name: 'Water Ocurence (1984-2020)'} );

//adding Visualization Parameters

var Vis_Occurence = { min : 0, max : 100, palette :['red', 'blue'] };
Map.addLayer({eeObject: occurrence.updateMask(occurrence.divide(100)), name : 'Water Occurence(1984-2020)' , visParams: Vis_Occurence});

//water mask for certain threeshold
var Vis_Water_Mask = { palette: ['white' , 'blue' ] } ;
var water_mask = occurrence.gt(50).unmask(0);
Map.addLayer({eeObject:water_mask, visParams:Vis_Water_Mask, name: '50% occurrence water mask'});

//checking the increase/decrease and permanent reservoir of water
var change = gsw.select("change_abs")
var VIS_Change = { min: -50, max: 50, palette: ['red', 'green', 'blue'] };
Map.centerObject(AOI)
Map.addLayer({eeObject: change, visParams:VIS_Change, name: 'Occurrence change intensity'});

//creating chart
var histogram = change.reduceRegion({ reducer: ee.Reducer.histogram(), geometry: AOI, scale: 30, bestEffort: true});
print('HISTOGRAM' , histogram);

//creating chart
var histogram = ui.Chart.image.histogram({ image:change, region:AOI, scale:30, minBucketWidth: 10 });
histogram.setOptions({title: "Histogram of surface water change intensity"});
print('CHART', histogram);

//transition

var occurrence = gsw.select('occurrence');
var change = gsw.select("change_abs");
var transition = gsw.select('transition');

//constants
var VIS_OCCURRENCE = {
    min: 0,
    max: 100,
    palette: ['red', 'blue']
};
var VIS_CHANGE = {
    min: -50,
    max: 50,
    palette: ['red', 'black', 'limegreen']
};
var VIS_WATER_MASK = {
  palette: ['white', 'blue']
};

// Create a feature for a transition class that includes the area covered.
function createFeature(transition_class_stats) {
  transition_class_stats = ee.Dictionary(transition_class_stats);
  var class_number = transition_class_stats.get('transition_class_value');
  var result = {
      transition_class_number: class_number,
      transition_class_name: lookup_names.get(class_number),
      transition_class_palette: lookup_palette.get(class_number),
      area_m2: transition_class_stats.get('sum')
  };
  return ee.Feature(null, result);   // Creates a feature without a geometry.
}

// Create a JSON dictionary that defines piechart colors based on the
// transition class palette.
// https://developers.google.com/chart/interactive/docs/gallery/piechart
function createPieChartSliceDictionary(fc) {
  return ee.List(fc.aggregate_array("transition_class_palette"))
    .map(function(p) { return {'color': p}; }).getInfo();
}

// Convert a number to a string. Used for constructing dictionary key lists
// from computed number objects.
function numToString(num) {
  return ee.Number(num).format();
}

// Create a dictionary for looking up names of transition classes.
var lookup_names = ee.Dictionary.fromLists(
    ee.List(gsw.get('transition_class_values')).map(numToString),
    gsw.get('transition_class_names')
);
// Create a dictionary for looking up colors of transition classes.
var lookup_palette = ee.Dictionary.fromLists(
    ee.List(gsw.get('transition_class_values')).map(numToString),
    gsw.get('transition_class_palette')
);

// Create a water mask layer, and set the image mask so that non-water areas
// are transparent.
var water_mask = occurrence.gt(90).mask(1);

// Generate a histogram object and print it to the console tab.
var histogram = ui.Chart.image.histogram({
  image: change,
  region: AOI,
  scale: 30,
  minBucketWidth: 10
});
histogram.setOptions({
  title: 'Histogram of surface water change intensity.'
});
print(histogram);

// Summarize transition classes in a region of interest.
var area_image_with_transition_class = ee.Image.pixelArea().addBands(transition);
var reduction_results = area_image_with_transition_class.reduceRegion({
  reducer: ee.Reducer.sum().group({
    groupField: 1,
    groupName: 'transition_class_value',
  }),
  geometry: AOI,
  scale: 30,
  bestEffort: true,
});
print('reduction_results', reduction_results);

var AOI_stats = ee.List(reduction_results.get('groups'));

var transition_fc = ee.FeatureCollection(AOI_stats.map(createFeature));
print('transition_fc', transition_fc);

// Add a summary chart.
var transition_summary_chart = ui.Chart.feature.byFeature({
    features: transition_fc,
    xProperty: 'transition_class_name',
    yProperties: ['area_m2', 'transition_class_number']
  })
  .setChartType('PieChart')
  .setOptions({
    title: 'Summary of transition class areas',
    slices: createPieChartSliceDictionary(transition_fc),
    sliceVisibilityThreshold: 0  // Don't group small slices.
  });
print(transition_summary_chart);


// Initialize Map Location


Map.addLayer({
  eeObject: water_mask,
  visParams: VIS_WATER_MASK,
  name: '90% occurrence water mask',
  shown: false
});
Map.addLayer({
  eeObject: occurrence.updateMask(occurrence.divide(100)),
  name: "Water Occurrence (1984-2015)",
  visParams: VIS_OCCURRENCE,
  shown: false
});
Map.addLayer({
  eeObject: change,
  visParams: VIS_CHANGE,
  name: 'occurrence change intensity',
  shown: false
});
Map.addLayer({
  eeObject: transition,
  name: 'Transition classes (1984-2015)',
});

Export.image.toAsset( 
  {image: gsw, 
  description: 'Behzad_image', 
  assetId: 'behzad1', 
  pyramidingPolicy: {'.default' : 'min'},
  region: AOI,
  scale: 30,
  maxPixels: 5000000,
  });

